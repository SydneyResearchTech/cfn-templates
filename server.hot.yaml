heat_template_version: 2021-04-16
description: >
  Ubuntu server deployment

parameters:
  flavor:
    type: string
    default: c3.8c16m10d
  floating_network:
    type: string
    default: external
  image:
    type: string
    default: Ubuntu Noble Server 2024-10-04
  key_name:
    type: string
    default: dean_taylor_sydney_edu_au
  metadata:
    default: {}
    type: json
  network:
    type: string
    default: er01
  os_project:
    type: string
    default: er01
  os_provider:
    type: string
    default: nci
  security_groups:
    type: json
    default: ["er01 ssh"]
  snap_volume_size:
    type: number
    default: 0
  snap_volume_type:
    type: string
    default: Nirin2_Transaction
    #default: Nirin2_General

conditions:
  has_snap_volume:
    not: {equals: [get_param: snap_volume_size, 0]}

resources:
  server:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      metadata:
        map_merge:
          - {get_param: metadata}
          - {port_id: {get_resource: serverPort}}
      name:
        str_replace:
          template: ip-${HOST_IP}.${OS_PROVIDER}-${OS_PROJECT}.sydney.edu.au
          params:
            ${HOST_IP}: {list_join: ['-', {str_split: ['.', {get_attr: [serverPort, fixed_ips, 0, ip_address]}]}]}
            ${OS_PROJECT}: {get_param: os_project}
            ${OS_PROVIDER}: {get_param: os_provider}
      image: {get_param: image}
      block_device_mapping_v2:
        list_concat:
          - if:
              - has_snap_volume
              -
                - boot_index: -1
                  delete_on_termination: true
                  volume_id: {get_resource: snapVolume}
              - []
      networks:
      - floating_ip: {get_resource: externalIp}
        port: {get_resource: serverPort}
      tags: []
      user_data:
        str_replace:
          template: |
            #cloud-config
            hostname: ${HOSTNAME}
            fqdn: ${HOSTNAME}.${DOMAIN}
            keyboard:
              layout: us
            locale: en_AU.utf8
            packages:
              - rsync
              - util-linux
              - xfsprogs
            package_update: true
            package_upgrade: true
            package_reboot_if_required: true
            runcmd:
              - ${RUNCMD_VAR_SNAP}
            timezone: Australia/Sydney
            write_files:
              ${WRITE_FILES}
          params:
            ${DOMAIN}:
              str_replace:
                template: ${OS_PROVIDER}-${OS_PROJECT}.sydney.edu.au
                params:
                  ${OS_PROJECT}: {get_param: os_project}
                  ${OS_PROVIDER}: {get_param: os_provider}
            ${HOSTNAME}:
              str_replace:
                template: ip-${HOST_IP}
                params:
                  ${HOST_IP}: {list_join: ['-', {str_split: ['.', {get_attr: [serverPort, fixed_ips, 0, ip_address]}]}]}
            ${RUNCMD_VAR_SNAP}:
              if:
              - has_snap_volume
              - str_replace:
                  template: >
                    cloud-init-per once snapd_var_snap bash -c '
                    DEVICE=/dev/disk/by-id/virtio-${VOLUME_ID};
                    VAR_SNAP_DEST=/run/var_snap_e8cc6a32;
                    blkid -p "$DEVICE" >/dev/null || mkfs.xfs "$DEVICE";
                    mkdir -p "$VAR_SNAP_DEST";
                    mount "$DEVICE" "$VAR_SNAP_DEST";
                    systemctl stop snapd.service snapd.socket;
                    rsync -a --ignore-existing /var/snap/ "${VAR_SNAP_DEST}/";
                    umount "$VAR_SNAP_DEST";
                    systemctl daemon-reload;
                    systemctl start var-snap.mount;
                    systemctl start snapd.socket snapd.service;
                    '
                  params:
                    ${VOLUME_ID}:
                      yaql:
                        expression: $.data.volume_id.substring(0,20)
                        data:
                          volume_id: {get_resource: snapVolume}
              - []
            ${WRITE_FILES}:
              list_concat:
              -
                - path: /etc/systemd/journald.conf.d/syslog.conf
                  content: |
                    [Journal]
                    ForwardToSyslog=no
              - if:
                - has_snap_volume
                -
                  - path: /etc/systemd/system/var-snap.mount
                    content:
                      str_replace:
                        template: |
                          [Unit]
                          Description=Mount unit to segregate snap operations to separate storage
                          After=snapd.mounts-pre.target
                          Before=snapd.mounts.target
                          [Mount]
                          What=/dev/disk/by-id/virtio-${VOLUME_ID}
                          Where=/var/snap
                          Type=xfs
                          [Install]
                          WantedBy=snapd.mounts.target
                          WantedBy=multi-user.target
                        params:
                          ${VOLUME_ID}:
                            yaql:
                              expression: $.data.volume_id.substring(0,20)
                              data:
                                volume_id: {get_resource: snapVolume}
                  - path: /etc/systemd/system/snapd.service.d/wait4varSnapMount.conf
                    content: |
                      [Unit]
                      After=var-snap.mount
                      Requires=var-snap.mount
                - []
      user_data_format: RAW
      user_data_update_policy: IGNORE

  snapVolume:
    condition: has_snap_volume
    type: OS::Cinder::Volume
    properties:
      size: {get_param: snap_volume_size}
      volume_type: {get_param: snap_volume_type}

  externalIp:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: floating_network}

  serverPort:
    type: OS::Neutron::Port
    properties:
      network: {get_param: network}
      admin_state_up: true
      port_security_enabled: true
      security_groups: {get_param: security_groups}
