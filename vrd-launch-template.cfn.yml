AWSTemplateFormatVersion: "2010-09-09"
Description: "Virtual research desktop launch template"
Parameters:
  Billing:
    Description: "Billing application code"
    Type: String
    Default: "xnat"
  CreatedBy:
    Description: "Group or individual deploying this service"
    Type: String
    Default: "dean.taylor@sydney.edu.au"
  Environment:
    AllowedValues: ["development","production","user acceptance testing"]
    Default: "development"
    Description: "Environment"
    Type: String
  Groups:
    Default: "cvl,desktop,usyd,vrd"
    Description: "Ansible groups as CSV no spaces"
    Type: String
  ImageId:
    Description: "AMI image id"
    Type: "AWS::EC2::Image::Id"
  InstanceType:
    Description: "EC2 instance type"
    Type: String
    Default: g4dn.xlarge
    AllowedValues: ["g4dn.xlarge"]
    ConstraintDescription: "must be a valid EC2 instance type."
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."
  SubnetId:
    Type: String
    Default: ""
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Default: ""

Outputs:
  InstanceProfileArn:
    Description: EC2 instance profile ARN
    Value: !GetAtt InstanceProfile.Arn
  RoleArn:
    Description: EC2 instance role ARN
    Value: !GetAtt InstanceRole.Arn
  SecurityGroupId:
    Description: Security group ID applied to instances
    Value: !GetAtt InstanceSecurityGroup.GroupId

Resources:
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}"
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 256
              DeleteOnTermination: true
        IamInstanceProfile: {Name: !Ref InstanceProfile}
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        # IMDSv2 only (disable IMDSv1)
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !GetAtt InstanceSecurityGroup.GroupId
            SubnetId: !Ref SubnetId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - {Key: "uni:billing:application", Value: !Ref Billing}
              - {Key: "uni:billing:managed_by",Value: "uni"}
              - {Key: "uni:billing:support",Value: "unmanaged"}
              - {Key: "uni:operations:backup", Value: "none"}
              - {Key: sydney.edu.au/ou, Value: "Research Technology"}
              - {Key: sydney.edu.au/resTek/ansibleGroups, Value: !Ref Groups}
              - {Key: sydney.edu.au/resTek/contact, Value: "ais.admin@sydney.edu.au"}
              - {Key: sydney.edu.au/resTek/createdBy, Value: !Ref CreatedBy}
              - {Key: sydney.edu.au/resTek/environment, Value: !Ref Environment}
        UserData:
          Fn::Base64: |
            #cloud-config
            ansible:
              install_method: pip
              ansible_config: /etc/ansible/ansible.cfg
              package_name: ansible
              setup_controller:
                run_ansible:
                  - playbook_name: restek.core.microk8s_dev_env
              galaxy:
                actions:
                  - ["ansible-galaxy","install","-r","/etc/ansible/requirements.yml"]
            bootcmd:
            - echo 'APT::Periodic::Update-Package-Lists "0";' >/etc/apt/apt.conf.d/99auto-upgrades
            - echo 'APT::Periodic::Download-Upgradeable-Packages "0";' >>/etc/apt/apt.conf.d/99auto-upgrades
            - echo 'APT::Periodic::AutocleanInterval "0";' >>/etc/apt/apt.conf.d/99auto-upgrades
            - echo 'APT::Periodic::Unattended-Upgrade "0";' >>/etc/apt/apt.conf.d/99auto-upgrades
            keyboard:
              layout: us
            locale: en_AU.UTF-8
            packages:
            - git
            package_update: true
            package_upgrade: true
            package_reboot_if_required: true
            runcmd:
            - - /bin/bash
              - -c
              - |
                mkdir -p /etc/ansible
                cat <<EOT >/etc/ansible/hosts.yml
                all:
                  hosts:
                    $(hostname --fqdn):
                      ansible_connection: local
                EOT
            #ssh_authorized_keys: []
            ssh_pwauth: false
            timezone: Australia/Sydney
            write_files:
            - content: |
                [defaults]
                inventory = /etc/ansible/hosts.yml
                [ssh_connection]
                ssh_args = -o StrictHostKeyChecking=accept-new -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=/tmp/%r@%h:%p
              path: /etc/ansible/ansible.cfg
            - content: |
                ---
                collections:
                  - name: https://github.com/SydneyResearchTech/playbooks.git
                    type: git
              path: /etc/ansible/requirements.yml
            - content: |
                [profile default]
                credential_source=Ec2InstanceMetadata
                region=ap-southeast-2
                output=json
              path: /etc/aws_config
              permissions: '0644'
            - content: |
                AWS_CONFIG_FILE="/etc/aws_config"
              path: /etc/environment
              append: true

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: {Service: ["ec2.amazonaws.com"]}
            Action: ["sts:AssumeRole"]
      Description: Instance access to resources
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowAccountLevelS3Actions
                Effect: Allow
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:GetAccountPublicAccessBlock"
                  - "s3:ListAccessPoints"
                  - "s3:ListAllMyBuckets"
                Resource: "arn:aws:s3:::*"
              - Sid: AllowListAndReadS3ActionOnMyBucket
                Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                Resource:
                  - "arn:aws:s3:::cvl-desktop-applications-x86-64"
                  - "arn:aws:s3:::cvl-desktop-applications-x86-64/*"
                  - "arn:aws:s3:::eresearch2023-2e7a2865"
                  - "arn:aws:s3:::eresearch2023-2e7a2865/*"
              #- Sid: AllObjectActions
              #  Effect: Allow
              #  Action:
              #    - "s3:*Object"
              #  Resource:
              #    - "arn:aws:s3:::cvl-desktop-applications-x86-64/*"
              #    - "arn:aws:s3:::eresearch2023-2e7a2865/*"
          PolicyName: root

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable EC2 instance access"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VpcId

  InterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: allow instances to connect
      FromPort: -1
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      ToPort: -1
